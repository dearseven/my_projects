PARTIAL_WAKE_LOCK
唤醒锁
过去，应用必须通过创建后台服务才能在 Android 系统中实现后台运行，而且在此过程中，还需要保证后台服务一直处于活动状态，因此后台服务又被称作 “自由运行服务”。应用在运行后台服务的时候，需要使用唤醒锁来防止 CPU 和基带处理器进入休眠状态。
但是这种使用唤醒锁的方法也有不足之处。频繁创建后台服务可能会让应用运行时间过久，导致内存一类的系统资源无法得到释放。CPU 和基带处理器的使用让设备无法进入休眠状态，进而严重影响设备的性能和续航能力。
应用可以通过 PowerManager 类获取部分唤醒锁 (partial wake locks)，它能确保在设备关闭屏幕和键盘背光后，CPU 依旧可以正常运行。请您前往 Android vitals 中的 “唤醒锁卡住” 和 “唤醒锁卡住 (后台) ” 页面，查看应用中部分唤醒锁的使用报告。
在报告中，您能了解有多少比例的电池工作时段 (即设备两次满电之间的时段) 受到了唤醒锁卡住事件的影响。详细信息包括：
	*
在过去的 30 天内受影响工作时段的百分比；
	*
按基准比较的详细信息：即您的应用与 Google Play 中排名前 1000 应用的对比情况；
	*
受影响的工作时段在一段时间内的变化趋势图；
	*
按应用版本、Android 系统版本以及设备型号等维度细分后的指标值 (细分指标并非以截图形式呈现，开发者可以点击栏目右侧的向下箭头，即可展开相关详细信息)。


如果基准显示您的应用属于这项指标 (即受影响的工作时段) 的最低 25% 区间，请考虑对改进您的应用。

正如我在第一篇文章中提到的一样，自从 Android 5.0 引进 JobScheduler 以来，解决过度唤醒的最佳方法就是避免使用标准闹钟以及后台服务。从 Android Oreo 开始，此举变为强制性要求，应用无法再在后台启动服务 (如果创建则导致异常)。同样地，我们也建议开发者减少使用唤醒锁，转用其它更为合适的替代方法，如：
	*
请使用 JobScheduler 或者调用 WorkManager API 处理后台任务，它们在后台任务运行期间会一直持有一个唤醒锁；
	*
如果您想要每隔一段时间或者在特定时间在后台运行任务，您可以使用 Alarm Manager 发送广播。Alarm Manager 在 BroadcastReceiver.onReceive() 方法的执行期间会一直持有一个唤醒锁；
	*
请在窗口上添加 FLAG_KEEP_SCREEN_ON 标记，保持屏幕背光常亮，以防在用户观看屏幕时 (如阅读电子书)，设备突然进入锁屏状态。通过这种方法方法，系统在活动结束后会立即释放唤醒锁。



如果您需要自行管理唤醒锁，比如长时间使用前台服务来播放音频，请遵循以下规则：
	*
请使用 PARTIAL_WAKE_LOCK，而非已弃用的唤醒锁；
	*
请明确规定唤醒锁有效时间，那么，即使应用没有释放唤醒锁，系统也会在有效时间到期后自动释放唤醒锁；
	*
请在唤醒锁上添加静态的描述型标签，如 com.myapp: my wake，以便在 Android vitals 上获取最佳报告数据。请不要添加 counters (计数) 或者其它动态标签。良好的描述型标签可以帮助 Android vitals 对应用中相似的唤醒锁进行合并 (cluster)，从而让开发者能够更准确地了解每个唤醒锁的行为；
	*
当应用不再需要唤醒锁时，必须将其立即释放。不过，请注意应用程序错误也同样会导致唤醒失效，为避免此类情况发生，建议您进行防御性编程，并且使用 try { … } finally { wakeLock.release(); } 包装调用。
