     这个请求是有2(2个Observable)步,第一步是登陆,第二步是下载图片
     第二步的参数是第一步的结果

     //1 Observable 登陆
      val loginObservable: Observable<ResponseBody> = ClientAPIUtil.getInstance().loginWithPwd(name, pwdOrCode)
    //通过flatMap转换,Function<ResponseBody, Observable<Map<String, String>>
    //ResponseBody是第一步的结果,Map<String, String>其实在这里是第二个Observable的数据发射类型
        loginObservable.flatMap(Function<ResponseBody, Observable<Map<String, String>>> {
            var map: Map<String, String> = HashMap<String, String>()
            map = BedFriendUserInfoTask.jsonToMapWithNoArray(it.string(), map)
            DebugLog.logFl(null, "1111", javaClass);
            if (map["status"] != null && map["status"].equals("success", ignoreCase = true)) {
                //登陆未成功
                saveUserInfo(map)//一个简单的保存数据的耗时请求,比如保存到数据库
                map.put("login_status", "1")
                //生成返回登陆状态的Observable,并且下载图片
                //2 Observable 下载图片,然后发送增加了登陆状态参数的map
                Observable.create {
                    downUserImage(map["logo"])//一个下载图片的耗时请求,比如用iostream来下载
                    //这个Observable发送的数据是稍微加工了一下的上一个Observable(ResponseBody的数据加工map了啊)的返回值
                    it.onNext(map)//发射数据
                }
            } else {
                //登陆未成功
                map.put("login_status", "0")
                //生成返回登陆状态的Observable
                //这个Observable发送的数据是稍微加工了一下的上一个Observable(ResponseBody的数据加工map了啊)的返回值
               //2 Observable ,因为登陆错误,所以不下载图片,只是发送增加了登陆状态参数的map
                Observable.create {
                    it.onNext(map)//发射数据
                 }
            }
        })
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread()).subscribe {
                    //这个时候订阅的Observable其实是第二步的,因为第一步的在flatMap里就被处理了.
                    DebugLog.logFl(null, "登陆状态:${it["login_status"].equals("1")}", javaClass);
                    if (it["login_status"].equals("1")) {
                        //
                        Toast.makeText(appCtx!!, "登陆成功", Toast.LENGTH_SHORT).show()

                    } else {
                        Toast.makeText(appCtx!!, it["errmsg"], Toast.LENGTH_SHORT).show()
                    }
                }